"use client"

import { useState, useEffect, useRef } from "react"
import { Canvas, useFrame, useThree } from "@react-three/fiber"
import { OrbitControls, PerspectiveCamera, Text, Box, Sphere, Environment } from "@react-three/drei"
import { motion, AnimatePresence } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Volume2, VolumeX, Play, RotateCcw, X } from "lucide-react"
import * as THREE from "three"

// Scene 1: Crowded Place - ƒê·ª©a tr·∫ª trong ƒë√°m ƒë√¥ng
function CrowdedScene({ isActive }: { isActive: boolean }) {
  const groupRef = useRef<THREE.Group>(null)
  
  useFrame((state) => {
    if (groupRef.current && isActive) {
      // T·∫°o chuy·ªÉn ƒë·ªông cho ƒë√°m ƒë√¥ng
      groupRef.current.rotation.y = Math.sin(state.clock.elapsedTime * 0.3) * 0.2
    }
  })

  if (!isActive) return null

  return (
    <group ref={groupRef}>
      {/* Nhi·ªÅu ng∆∞·ªùi xung quanh - ƒë·∫°i di·ªán b·ªüi boxes */}
      {Array.from({ length: 30 }).map((_, i) => {
        const angle = (i / 30) * Math.PI * 2
        const radius = 5 + Math.random() * 3
        const x = Math.cos(angle) * radius
        const z = Math.sin(angle) * radius
        const height = 1.5 + Math.random() * 0.5
        
        return (
          <Box
            key={i}
            position={[x, height / 2, z]}
            args={[0.5, height, 0.5]}
            castShadow
          >
            <meshStandardMaterial
              color={`hsl(${Math.random() * 360}, 50%, 50%)`}
              opacity={0.8}
              transparent
            />
          </Box>
        )
      })}
      
      {/* ƒê·ª©a tr·∫ª (nh·ªè h∆°n) - ·ªü gi·ªØa */}
      <Box position={[0, 0.6, 0]} args={[0.4, 1.2, 0.4]} castShadow>
        <meshStandardMaterial color="#ffb6c1" />
      </Box>
      
      {/* M·∫∑t ƒë·∫•t */}
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0, 0]} receiveShadow>
        <planeGeometry args={[50, 50]} />
        <meshStandardMaterial color="#cccccc" />
      </mesh>
    </group>
  )
}

// Scene 2: Lost Scene - ƒê·ª©a tr·∫ª b·ªã l·∫°c, nh√¨n quanh kh√¥ng th·∫•y ba m·∫π
function LostScene({ isActive }: { isActive: boolean }) {
  const groupRef = useRef<THREE.Group>(null)
  
  useFrame((state) => {
    if (groupRef.current && isActive) {
      // Camera quay tr√≤n - m√¥ ph·ªèng ƒë·ª©a tr·∫ª nh√¨n quanh t√¨m ba m·∫π
      groupRef.current.rotation.y = state.clock.elapsedTime * 0.5
    }
  })

  if (!isActive) return null

  return (
    <group ref={groupRef}>
      {/* ƒê√°m ƒë√¥ng xa h∆°n, m·ªù h∆°n */}
      {Array.from({ length: 40 }).map((_, i) => {
        const angle = (i / 40) * Math.PI * 2
        const radius = 8 + Math.random() * 5
        const x = Math.cos(angle) * radius
        const z = Math.sin(angle) * radius
        const height = 1.5 + Math.random() * 0.5
        
        return (
          <Box
            key={i}
            position={[x, height / 2, z]}
            args={[0.5, height, 0.5]}
          >
            <meshStandardMaterial
              color="#666666"
              opacity={0.3}
              transparent
            />
          </Box>
        )
      })}
      
      {/* ƒê·ª©a tr·∫ª ƒë·ª©ng m·ªôt m√¨nh */}
      <Box position={[0, 0.6, 0]} args={[0.4, 1.2, 0.4]} castShadow>
        <meshStandardMaterial color="#ffb6c1" emissive="#ff69b4" emissiveIntensity={0.3} />
      </Box>
      
      {/* M·∫∑t ƒë·∫•t t·ªëi h∆°n */}
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0, 0]} receiveShadow>
        <planeGeometry args={[50, 50]} />
        <meshStandardMaterial color="#888888" />
      </mesh>
    </group>
  )
}

// Scene 3: Fear Scene - C·∫£nh ƒë·ª©a tr·∫ª ho·∫£ng s·ª£
function FearScene({ isActive }: { isActive: boolean }) {
  const groupRef = useRef<THREE.Group>(null)
  
  useFrame((state) => {
    if (groupRef.current && isActive) {
      // Rung l·∫Øc nh·∫π - m√¥ ph·ªèng s·ª± run r·∫©y
      groupRef.current.position.y = Math.sin(state.clock.elapsedTime * 8) * 0.05
    }
  })

  if (!isActive) return null

  return (
    <group ref={groupRef}>
      {/* M√¥i tr∆∞·ªùng t·ªëi h∆°n, ƒë√°ng s·ª£ h∆°n */}
      <ambientLight intensity={0.1} />
      <pointLight position={[0, 3, 0]} intensity={0.5} color="#4169e1" />
      
      {/* ƒê·ª©a tr·∫ª - nh·ªè h∆°n, co r√∫m */}
      <Box position={[0, 0.5, 0]} args={[0.4, 1.0, 0.4]} castShadow>
        <meshStandardMaterial
          color="#ffb6c1"
          emissive="#0000ff"
          emissiveIntensity={0.5}
        />
      </Box>
      
      {/* Shadows xung quanh - t·∫°o c·∫£m gi√°c ƒë√°ng s·ª£ */}
      {Array.from({ length: 8 }).map((_, i) => {
        const angle = (i / 8) * Math.PI * 2
        const radius = 4
        const x = Math.cos(angle) * radius
        const z = Math.sin(angle) * radius
        
        return (
          <Sphere
            key={i}
            position={[x, 1, z]}
            args={[0.3, 16, 16]}
          >
            <meshStandardMaterial
              color="#000000"
              opacity={0.5}
              transparent
            />
          </Sphere>
        )
      })}
      
      {/* M·∫∑t ƒë·∫•t t·ªëi */}
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0, 0]}>
        <planeGeometry args={[50, 50]} />
        <meshStandardMaterial color="#333333" />
      </mesh>
    </group>
  )
}

// Scene 4: Rescue Scene - Ba m·∫π t√¨m th·∫•y con nh·ªù GPS
function RescueScene({ isActive }: { isActive: boolean }) {
  const groupRef = useRef<THREE.Group>(null)
  const lightRef = useRef<THREE.PointLight>(null)
  
  useFrame((state) => {
    if (isActive && lightRef.current) {
      // √Ånh s√°ng ·∫•m √°p nh·∫•p nh√°y
      lightRef.current.intensity = 2 + Math.sin(state.clock.elapsedTime * 3) * 0.5
    }
  })

  if (!isActive) return null

  return (
    <group ref={groupRef}>
      {/* √Ånh s√°ng ·∫•m √°p */}
      <ambientLight intensity={0.8} />
      <pointLight ref={lightRef} position={[0, 5, 0]} intensity={2} color="#ffd700" />
      
      {/* ƒê·ª©a tr·∫ª */}
      <Box position={[0, 0.6, 0]} args={[0.4, 1.2, 0.4]} castShadow>
        <meshStandardMaterial color="#ffb6c1" emissive="#ffd700" emissiveIntensity={0.3} />
      </Box>
      
      {/* GPS bracelet - v√≤ng tr√≤n ph√°t s√°ng */}
      <Sphere position={[0, 0.8, 0.3]} args={[0.15, 16, 16]}>
        <meshStandardMaterial
          color="#4169e1"
          emissive="#4169e1"
          emissiveIntensity={2}
        />
      </Sphere>
      
      {/* Ba m·∫π ƒëang t·ªõi - 2 ng∆∞·ªùi l·ªõn */}
      <Box position={[-2, 0.9, -3]} args={[0.5, 1.8, 0.5]} castShadow>
        <meshStandardMaterial color="#4169e1" />
      </Box>
      <Box position={[2, 0.9, -3]} args={[0.5, 1.8, 0.5]} castShadow>
        <meshStandardMaterial color="#ff69b4" />
      </Box>
      
      {/* GPS signal waves */}
      {[1, 2, 3].map((i) => (
        <mesh key={i} position={[0, 0.8, 0.3]}>
          <ringGeometry args={[0.3 * i, 0.3 * i + 0.1, 32]} />
          <meshBasicMaterial
            color="#4169e1"
            transparent
            opacity={0.3 / i}
          />
        </mesh>
      ))}
      
      {/* M·∫∑t ƒë·∫•t s√°ng */}
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, 0, 0]}>
        <planeGeometry args={[50, 50]} />
        <meshStandardMaterial color="#e0e0e0" />
      </mesh>
    </group>
  )
}

// Camera Controller
function CameraController({ scene }: { scene: number }) {
  const { camera } = useThree()
  
  useFrame(() => {
    const targetPositions = [
      { x: 0, y: 2, z: 8 },    // Scene 1: Nh√¨n t·ª´ xa
      { x: 0, y: 1.5, z: 3 },  // Scene 2: G·∫ßn h∆°n
      { x: 0, y: 0.8, z: 1.5 }, // Scene 3: R·∫•t g·∫ßn - POV c·ªßa tr·∫ª
      { x: 0, y: 3, z: 10 },   // Scene 4: Nh√¨n to√†n c·∫£nh
    ]
    
    const target = targetPositions[scene] || targetPositions[0]
    
    camera.position.lerp(
      new THREE.Vector3(target.x, target.y, target.z),
      0.05
    )
    camera.lookAt(0, 0.6, 0)
  })
  
  return null
}

interface LostChildSimulation3DProps {
  onClose?: () => void
}

export function LostChildSimulation3D({ onClose }: LostChildSimulation3DProps) {
  const [scene, setScene] = useState(0)
  const [isPlaying, setIsPlaying] = useState(false)
  const [soundEnabled, setSoundEnabled] = useState(true)

  const scenes = [
    {
      title: "Kho·∫£nh kh·∫Øc b√¨nh th∆∞·ªùng",
      description: "Con ƒëang ·ªü trong si√™u th·ªã/c√¥ng vi√™n ƒë√¥ng ng∆∞·ªùi c√πng ba m·∫π...",
      emotion: "üòä",
      duration: 4000,
    },
    {
      title: "M·∫•t d·∫•u ba m·∫π",
      description: "Con quay l∆∞ng m·ªôt ch√∫t... v√† kh√¥ng c√≤n th·∫•y ba m·∫π ƒë√¢u n·ªØa.",
      emotion: "üò∞",
      duration: 5000,
    },
    {
      title: "N·ªói s·ª£ h√£i",
      description: "Con ho·∫£ng s·ª£, kh√≥c, kh√¥ng bi·∫øt ph·∫£i l√†m g√¨. Xung quanh to√†n ng∆∞·ªùi l·∫°...",
      emotion: "üò≠",
      duration: 5000,
    },
    {
      title: "Gi·∫£i ph√°p: V√≤ng tay GPS",
      description: "Nh·ªù v√≤ng tay ARTEMIS, ba m·∫π bi·∫øt ch√≠nh x√°c v·ªã tr√≠ con v√† t√¨m th·∫•y ngay!",
      emotion: "‚ù§Ô∏è",
      duration: 6000,
    },
  ]

  useEffect(() => {
    if (!isPlaying) return

    const timer = setTimeout(() => {
      if (scene < scenes.length - 1) {
        setScene(scene + 1)
      } else {
        setIsPlaying(false)
      }
    }, scenes[scene].duration)

    return () => clearTimeout(timer)
  }, [scene, isPlaying, scenes])

  const handleStart = () => {
    setScene(0)
    setIsPlaying(true)
  }

  const handleReset = () => {
    setScene(0)
    setIsPlaying(false)
  }

  return (
    <div className="relative w-full h-[600px] bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 rounded-2xl overflow-hidden">
      {/* 3D Canvas */}
      <Canvas shadows>
        <CameraController scene={scene} />
        
        {/* Lighting */}
        <ambientLight intensity={scene === 2 ? 0.1 : 0.5} />
        <directionalLight
          position={[10, 10, 5]}
          intensity={scene === 2 ? 0.2 : 0.8}
          castShadow
        />
        
        {/* Scenes */}
        <CrowdedScene isActive={scene === 0} />
        <LostScene isActive={scene === 1} />
        <FearScene isActive={scene === 2} />
        <RescueScene isActive={scene === 3} />
      </Canvas>

      {/* UI Overlay */}
      <div className="absolute inset-0 pointer-events-none">
        {/* Close button */}
        {onClose && (
          <Button
            variant="ghost"
            size="icon"
            className="absolute top-4 right-4 pointer-events-auto z-50 bg-black/50 hover:bg-black/70 text-white"
            onClick={onClose}
          >
            <X className="h-5 w-5" />
          </Button>
        )}

        {/* Story overlay */}
        <AnimatePresence mode="wait">
          {isPlaying && (
            <motion.div
              key={scene}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.5 }}
              className="absolute bottom-0 left-0 right-0 p-6 bg-gradient-to-t from-black/90 via-black/70 to-transparent"
            >
              <Card className="p-6 bg-black/50 backdrop-blur-lg border-white/10">
                <div className="flex items-start gap-4">
                  <div className="text-4xl">{scenes[scene].emotion}</div>
                  <div className="flex-1">
                    <h3 className="text-xl font-bold text-white mb-2">
                      {scenes[scene].title}
                    </h3>
                    <p className="text-white/80 text-sm leading-relaxed">
                      {scenes[scene].description}
                    </p>
                  </div>
                </div>
                
                {/* Progress bar */}
                <div className="mt-4 w-full h-1 bg-white/20 rounded-full overflow-hidden">
                  <motion.div
                    className="h-full bg-primary"
                    initial={{ width: "0%" }}
                    animate={{ width: "100%" }}
                    transition={{ duration: scenes[scene].duration / 1000, ease: "linear" }}
                  />
                </div>
              </Card>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Control panel */}
        {!isPlaying && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="absolute inset-0 flex items-center justify-center bg-black/60 backdrop-blur-sm"
          >
            <Card className="p-8 max-w-md mx-4 text-center">
              <div className="text-5xl mb-4">üò¢‚û°Ô∏è‚ù§Ô∏è</div>
              <h2 className="text-2xl font-bold mb-3">
                Tr·∫£i nghi·ªám c·∫£m x√∫c
              </h2>
              <p className="text-muted-foreground mb-6 leading-relaxed">
                H√£y ƒë·∫∑t m√¨nh v√†o v·ªã tr√≠ c·ªßa con b·∫°n khi b·ªã l·∫°c. 
                Tr·∫£i nghi·ªám 3D n√†y s·∫Ω gi√∫p b·∫°n hi·ªÉu r√µ n·ªói s·ª£ h√£i c·ªßa con 
                v√† t·∫°i sao v√≤ng tay GPS ARTEMIS l√† c·∫ßn thi·∫øt.
              </p>
              
              <div className="flex gap-3 justify-center pointer-events-auto">
                <Button
                  size="lg"
                  onClick={handleStart}
                  className="gap-2"
                >
                  <Play className="h-5 w-5" />
                  {scene === 0 ? "B·∫Øt ƒë·∫ßu tr·∫£i nghi·ªám" : "Ti·∫øp t·ª•c"}
                </Button>
                
                {scene > 0 && (
                  <Button
                    size="lg"
                    variant="outline"
                    onClick={handleReset}
                    className="gap-2"
                  >
                    <RotateCcw className="h-5 w-5" />
                    Xem l·∫°i
                  </Button>
                )}
              </div>
              
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setSoundEnabled(!soundEnabled)}
                className="mt-4 gap-2 pointer-events-auto"
              >
                {soundEnabled ? (
                  <>
                    <Volume2 className="h-4 w-4" />
                    √Çm thanh: B·∫≠t
                  </>
                ) : (
                  <>
                    <VolumeX className="h-4 w-4" />
                    √Çm thanh: T·∫Øt
                  </>
                )}
              </Button>
            </Card>
          </motion.div>
        )}

        {/* End screen */}
        {!isPlaying && scene === scenes.length - 1 && (
          <motion.div
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            className="absolute inset-0 flex items-center justify-center bg-gradient-to-br from-primary/20 to-pink-500/20 backdrop-blur-sm"
          >
            <Card className="p-8 max-w-lg mx-4 text-center">
              <div className="text-6xl mb-4">‚ú®</div>
              <h2 className="text-3xl font-bold mb-3">
                An t√¢m m·ªói ng√†y
              </h2>
              <p className="text-muted-foreground mb-6 leading-relaxed">
                V·ªõi v√≤ng tay GPS ARTEMIS, b·∫°n lu√¥n bi·∫øt con m√¨nh ·ªü ƒë√¢u. 
                Kh√¥ng c√≤n lo l·∫Øng, kh√¥ng c√≤n ho·∫£ng s·ª£. 
                Ch·ªâ c√≥ t√¨nh y√™u th∆∞∆°ng v√† s·ª± an to√†n.
              </p>
              
              <div className="flex flex-col sm:flex-row gap-3 justify-center pointer-events-auto">
                <Button size="lg" asChild>
                  <a href="/products">
                    Kh√°m ph√° s·∫£n ph·∫©m
                  </a>
                </Button>
                <Button size="lg" variant="outline" onClick={handleReset}>
                  <RotateCcw className="h-5 w-5 mr-2" />
                  Xem l·∫°i
                </Button>
              </div>
            </Card>
          </motion.div>
        )}
      </div>

      {/* Scene indicator */}
      {isPlaying && (
        <div className="absolute top-4 left-4 flex gap-2">
          {scenes.map((_, i) => (
            <div
              key={i}
              className={`h-2 w-12 rounded-full transition-all ${
                i === scene
                  ? "bg-primary"
                  : i < scene
                  ? "bg-primary/50"
                  : "bg-white/20"
              }`}
            />
          ))}
        </div>
      )}
    </div>
  )
}

